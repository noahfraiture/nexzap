package pages

import (
	"fmt"
	"nexzap/internal/models"
	"nexzap/templates/layouts"
	"nexzap/templates/partials"
)

templ homeContent(sheet models.SheetTempl) {
	@submitDataScript(sheet.Id, sheet.NbPage)
	<div class="grid grid-cols-1 md:grid-cols-2 gap-6 h-full" x-data="submitData">
		@leftPanel(sheet)
		@rightPanel(sheet)
	</div>
}

templ leftPanel(sheet models.SheetTempl) {
	<div class="card card-border card-body bg-base-200 shadow-lg flex flex-col md:min-h-0">
		<h2 class="card-title">{ sheet.Title }</h2>
		<div id="sheet" class="flex flex-col md:min-h-0 md:grow">
			@partials.GuideContent(sheet)
			@partials.Buttons(sheet)
		</div>
	</div>
}

templ rightPanel(sheet models.SheetTempl) {
	<div class="flex flex-col-reverse md:flex-col gap-6 md:min-h-0 grow">
		@partials.EditorPanel(sheet)
		@partials.ExercisePanel(sheet)
	</div>
}

templ NextContent(sheet models.SheetTempl) {
	@partials.GuideContent(sheet)
	@partials.Buttons(sheet)
	<div id="test" hx-swap-oob="innerHTML">
		@partials.ExerciseContent(sheet.ExerciseContent)
	</div>
	<script>
		setContent({{sheet.SubmissionContent}})
	</script>
}

templ Home(fromHtmx bool, sheet models.SheetTempl) {
	// core of codemirror
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
	// languagss
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/addon/mode/simple.min.js"></script>
	<script src={ fmt.Sprintf("https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/%s/%s.min.js", sheet.CodeEditor, sheet.CodeEditor) }></script>
	if fromHtmx {
		<title id="title" hx-swap-oob="#title">NexZap - Home</title>
		@homeContent(sheet)
	} else {
		@layouts.Base("NexZap - Home") {
			@homeContent(sheet)
		}
	}
}

// TODO : put the code inside
templ submitDataScript(id string, page int) {
	<script>
		function submitData() {
			return {
				loading: false,
				key: {{ fmt.Sprintf("%s:%d", id, page) }},
				code: this.$persist({}).as("code"),
				output: this.$persist({}).as("output"),
				updateStatus(event) {
					response = JSON.parse(event.detail.xhr.responseText)
					this.code[this.key] = response.code
					this.output[this.key] = response.output
				},
				updatePage(event) {
					const sheetId = event.detail.xhr.getResponseHeader('X-Sheet-Id');
					const page = event.detail.xhr.getResponseHeader('X-Page');
					this.key = `${sheetId}:${page}`;
				},
				getCode() {
					if (!(this.key in this.code)) {
						this.code[this.key] = -1;
					}
					return this.code[this.key]
				},
				getOutput() {
					if (!(this.key in this.output)) {
						this.output[this.key] = "";
					}
					return this.output[this.key]
				},
			}
		}
	</script>
}
