package pages

import (
	"fmt"
	"nexzap/internal/models"
	"nexzap/templates/layouts"
	"nexzap/templates/partials"
)

templ homeContent(sheet models.SheetTempl) {
	@submitDataScript(sheet)
	<div
		class="grid grid-cols-1 md:grid-cols-2 gap-6 h-full"
		id="submitData"
		x-init="editor = undefined"
		x-data={ fmt.Sprintf("submitData({mode:'%s', submission:`%s`, key:'%s'})", sheet.CodeEditor, sheet.SubmissionContent, sheet.Id) }
	>
		@leftPanel(sheet)
		@rightPanel(sheet)
	</div>
}

templ leftPanel(sheet models.SheetTempl) {
	<div id="left-panel" class="card card-border card-body bg-base-200 shadow-lg flex flex-col md:min-h-0">
		@partials.Guide(sheet)
	</div>
}

templ rightPanel(sheet models.SheetTempl) {
	<div class="flex flex-col-reverse md:flex-col gap-6 md:min-h-0 grow">
		@partials.EditorPanel(sheet)
		@partials.ExercisePanel(sheet)
	</div>
}

templ NextContent(fromHtmx bool, sheet models.SheetTempl, tutorials []models.ListTutorialTempl) {
	if fromHtmx {
		@partials.Guide(sheet)
		<div id="test" hx-swap-oob="innerHTML">
			@partials.ExerciseContent(sheet.ExerciseContent)
		</div>
		// update the sheet with content key and mode
		<input
			id="codemirror"
			type="hidden"
			hx-swap-oob="outerHTML"
			x-init={ fmt.Sprintf(
				"updateSheet(`%[2]s`, `%[3]s`); " +
				"const script = document.createElement('script'); " +
				"script.src = `https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/mode/%[1]s/%[1]s.min.js`; " +
				"script.onload = () => { updateMode(`%[1]s`); updateSnippets() }; " +
				"document.head.appendChild(script); ", sheet.CodeEditor, sheet.Id, sheet.SubmissionContent ) }
		/>
		// import mode
		// update content
	} else {
		@Home(fromHtmx, sheet, tutorials)
	}
}

templ Home(fromHtmx bool, sheet models.SheetTempl, tutorials []models.ListTutorialTempl) {
	// core of codemirror
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/codemirror.min.js"></script>
	// languages
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/addon/mode/simple.min.js"></script>
	<div id="language-script">
		<script src={ fmt.Sprintf("https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/mode/%s/%s.min.js", sheet.CodeEditor, sheet.CodeEditor) }></script>
	</div>
	if fromHtmx {
		<title id="title" hx-swap-oob="#title">NexZap - Home</title>
		@homeContent(sheet)
	} else {
		@layouts.Base("NexZap - Home", tutorials) {
			@homeContent(sheet)
		}
	}
}

templ submitDataScript(sheet models.SheetTempl) {
	// <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.8/dist/cdn.min.js" defer></script>
	<script>
		function debounce(fn, delay) {
			let timeout
			return function(...args) {
				clearTimeout(timeout)
				timeout = setTimeout(() => fn(...args), delay)
			}
		}

		function submitData(props) {
			return {
				loading: false,
				key: props.key,
				initEditor(el) {
					if (editor) {
						console.log("Should not init existing")
						return
					}

					console.log("init new")
					editor = CodeMirror.fromTextArea(el, {
						mode: props.mode,
						lineNumbers: true,
						lineSeparator: false,
						theme: "daisyui",
						indentUnit: 4,
						lineWrapping: true,
						autoCloseBrackets: true,
						matchBrackets: true,
					})
					// save to local storage
					let saveCode = debounce((cm) => {
						console.log("saving")
						this.code[this.key] = cm.getValue()
					}, 1000)
					editor.on("change", (cm) => {
						saveCode(cm)
					})
					// set content
					if (this.key in this.code && this.code[this.key] !== "") {
						editor.setValue(this.code[this.key])
					} else {
						editor.setValue(props.submission)
					}
				},


				statusCode: Alpine.$persist({}).as("statusCode"),
				output: Alpine.$persist({}).as("output"),
				updateStatus(event) {
					response = JSON.parse(event.detail.xhr.responseText)
					this.statusCode[this.key] = response.statusCode
					this.output[this.key] = response.output
				},
				getStatusCode() {
					if (!(this.key in this.statusCode)) {
						this.statusCode[this.key] = -1
					}
					return this.statusCode[this.key]
				},
				getOutput() {
					if (!(this.key in this.output)) {
						this.output[this.key] = ""
					}
					return this.output[this.key]
				},

				code: Alpine.$persist({}).as("code"),
				getCode() {
					return editor !== undefined ? editor.getValue() : ""
				},


				keymapEnable: false,
				keymapMode: "default", // TODO : save in persist
				toggleKeymap() {
					this.keymapEnable = !this.keymapEnable;
				},
				setKeymapMode(content) {
					this.keymapMode = content
				},
				updateKeymap() {
					if (enable) {
						editor.setOption("keyMap", this.keymapMode)
					} else {
						editor.setOption("keyMap", "default")
					}
				},


				updateSheet(key, submission) {
					this.key = key
					if (this.key in this.code && this.code[this.key] !== "") {
						editor.setValue(this.code[this.key])
					} else {
						editor.setValue(submission)
					}
				},
				updateMode(mode) {
					editor.setOption("mode", mode)
				},
				getKey() {
					return this.key
				},

			}
		}
	</script>
}
