package pages

import "zapbyte/templates/layouts"
import "zapbyte/internal/models"
import "fmt"

templ homeContent(tutorial models.Tutorial) {
	<div class="grid grid-cols-1 md:grid-cols-2 gap-6 h-full">
		// Left Panel
		<div class="card card-border bg-base-200 shadow-lg">
			@Highlight()
			<div class="p-6 space-y-4">
				<h2 class="card-title">{ tutorial.Language }</h2>
				for _, sheet := range tutorial.Sheets {
					if sheet.IsCode {
						<pre><code class="language-go">{ sheet.Content }</code></pre>
					} else {
						<p>{ sheet.Content }</p>
					}
				}
			</div>
		</div>
		// Right Panel (Code Editor & Tests)
		<div class="flex flex-col gap-6 h-full">
			// Code Editor
			<div class="card bg-base-200 shadow-lg flex-1">
				<div class="card-body" x-data="{keymap: 'default', enabled: false}">
					// Change the keymap
					<div class="flex justify-between">
						<h3 class="card-title">Your Solution</h3>
						<div class="flex justify-center items-center gap-4">
							<input type="checkbox" class="toggle" x-model="enabled" @change="toggleKeymap()"/>
							<select class="select" x-model="keymap" @change="setKeymap(keymap)">
								<option value="default">Keymap</option>
								<option value="vim">Vim</option>
								<option value="emacs">Emacs</option>
								<option value="sublime">Sublime</option>
							</select>
						</div>
					</div>
					// Editor itself
					<div>
						@CodeEditor(tutorial.Highlighter)
					</div>
					<div class="card-actions justify-end mt-4">
						<button class="btn btn-primary">Submit</button>
					</div>
				</div>
			</div> // Tests Output
			<div class="card card-border bg-base-200 shadow-lg flex-1">
				<div class="card-body">
					<h3 class="card-title">Tests</h3>
					<p class="text-sm">Test results and output will show up here.</p>
				</div>
			</div>
		</div>
	</div>
}

templ Home(fromHtmx bool, tutorial models.Tutorial) {
	if fromHtmx {
		<title id="title" hx-swap-oob="#title">ZapByte - Home</title>
		@homeContent(tutorial)
	} else {
		@layouts.Base("ZapByte - Home") {
			@homeContent(tutorial)
		}
	}
}

templ CodeEditor(language string) {
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css"/>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/go/go.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/keymap/vim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/keymap/emacs.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/keymap/sublime.min.js"></script>
	<script src={ fmt.Sprintf("https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/%s/%s.min.js", "language", "language") }></script>
	<script>
		function initialized() {
			return {
				show: false,
				ready() { this.show = true },
				isReady() { return this.show === true },
			}
		}
	</script>
	// Show the code editor only when it's fully load
	<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.8/dist/cdn.min.js"></script>
	<div x-data="initialized">
		<textarea id="code" x-show="isReady"></textarea>
		<script>
			let editor = undefined;
			let enable = false;
			let keymap = "default";
			function setKeymap(newKeymap) {
				console.log(keymap, newKeymap, enable)
				keymap = newKeymap;
				updateKeymap();
			}
			function toggleKeymap() {
				enable = !enable;
				updateKeymap();
			}
			function updateKeymap() {
				console.log(keymap, enable)
				if (enable) {
					editor.setOption('keyMap', keymap)
				} else {
					editor.setOption('keyMap', "default")
				}
			}

			document.addEventListener('alpine:init', () => {
		    editor = CodeMirror.fromTextArea(document.getElementById("code"), {
		        mode: {{ language }},
		        lineNumbers: true,
						lineSeparator: false,
		        theme: "daisyui",
						indentUnit: 4,

		    });
				Alpine.data('initialized', () => ({isReady: false}))

			});
	  </script>
	</div>
	// Custom theme based on daisy
	<style>
	  /* Custom CodeMirror theme: "daisyui" using CSS variables */
	  .cm-s-daisyui.CodeMirror {
	    background-color: var(--color-base-100);
	    color: var(--color-base-content);
	  }

	  .cm-s-daisyui .CodeMirror-gutters {
	    background: var(--color-base-200);
	    color: var(--color-neutral-content);
	    border-right: 1px solid var(--color-base-300);
	  }

	  .cm-s-daisyui .CodeMirror-cursor {
	    border-left: 1px solid var(--color-warning);
	  }

	  .cm-s-daisyui .CodeMirror-linenumber {
	    color: var(--color-neutral-content);
	  }

	  .cm-s-daisyui .CodeMirror-selected {
	    background: color-mix(in oklch, var(--color-primary) 30%, transparent);
	  }

	  /* Syntax highlighting using DaisyUI theme colors */
	  .cm-s-daisyui .cm-keyword {
	    color: var(--color-secondary);
	  }

	  .cm-s-daisyui .cm-string {
	    color: var(--color-success);
	  }

	  .cm-s-daisyui .cm-comment {
	    color: var(--color-neutral-content);
	    font-style: italic;
	  }

	  .cm-s-daisyui .cm-number {
	    color: var(--color-error);
	  }

	  .CodeMirror {
	    height: 300px;
	    width: 100%;
	  }
	</style>
}

templ Highlight() {
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css"/>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
	<script>hljs.highlightAll();</script>
	<style>
			/* Base styles */
		.hljs {
		  background-color: var(--color-base-100);
		  color: var(--color-base-content);
		  padding: 1em;
		}

		/* CodeMirror uses 300px height, but for highlight.js we'll let it be flexible */
		.hljs pre {
		  margin: 0;
		}

		/* Syntax highlighting matching CodeMirror */
		.hljs-keyword {
		  color: var(--color-secondary);
		}

		.hljs-string {
		  color: var(--color-success);
		}

		.hljs-comment {
		  color: var(--color-neutral-content);
		  font-style: italic;
		}

		.hljs-number {
		  color: var(--color-error);
		}

		/* Additional highlight.js classes mapped to DaisyUI colors */
		.hljs-title,
		.hljs-title.class,
		.hljs-title.function {
		  color: var(--color-primary);
		}

		.hljs-variable,
		.hljs-attribute,
		.hljs-tag {
		  color: var(--color-info);
		}

		.hljs-operator,
		.hljs-punctuation {
		  color: var(--color-base-content);
		}

		.hljs-literal,
		.hljs-built_in {
		  color: var(--color-warning);
		}

		.hljs-meta {
		  color: var(--color-accent);
		}

		/* Selection matching CodeMirror */
		.hljs::selection {
		  background: color-mix(in oklch, var(--color-primary) 30%, transparent);
		}

		/* Optional: Add some subtle styling for better readability */
		.hljs code {
		  background: transparent;
		}

		/* Match the gutter styling if needed */
		.hljs-ln-numbers {
		  background: var(--color-base-200);
		  color: var(--color-neutral-content);
		  border-right: 1px solid var(--color-base-300);
		  padding-right: 0.5em;
		}
	</style>
}
