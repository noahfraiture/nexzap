package partials

import (
	"fmt"
	"nexzap/internal/models"
	"strconv"
)

templ GuideContent(sheet models.SheetTempl) {
	<div class="min-h-0 overflow-y-scroll grow prose">
		@templ.Raw(sheet.SheetContent)
	</div>
	// must load here to reapply on change context (next page)
	@Prism()
}

templ Buttons(sheet models.SheetTempl) {
	<div class="flex justify-center items-center gap-4 mt-4">
		if sheet.NbPage > 1 {
			<button type="button" class="btn btn-primary" hx-get={ string(templ.URL(fmt.Sprintf("/sheet?page=%d", sheet.NbPage-1))) } hx-target="#sheet">Previous</button>
		}
		<span class="text-base">Page { strconv.Itoa(sheet.NbPage) } of { strconv.Itoa(sheet.MaxPage) }</span>
		if sheet.NbPage < sheet.MaxPage {
			<button type="button" class="btn btn-primary" hx-get={ string(templ.URL(fmt.Sprintf("/sheet?page=%d", sheet.NbPage+1))) } hx-target="#sheet">Next</button>
		}
	</div>
}

templ ExerciseContent(content string) {
	<div class="min-h-0 overflow-y-scroll prose">
		@templ.Raw(content)
	</div>
}

templ EditorPanel(sheet models.SheetTempl) {
	<div class="card bg-base-200 shadow-lg">
		<div class="card-body" x-data="{keymap: 'default', enabled: false}">
			// Change the keymap
			<div class="flex justify-between">
				<h3 class="card-title">Your Solution</h3>
				<div class="flex justify-center items-center gap-4">
					<input type="checkbox" class="toggle" x-model="enabled" @change="toggleKeymap()"/>
					<select class="select" x-model="keymap" @change="setKeymap(keymap)">
						<option value="default">Keymap</option>
						<option value="vim">Vim</option>
						<option value="emacs">Emacs</option>
						<option value="sublime">Sublime</option>
					</select>
				</div>
			</div>
			// Editor itself
			// FIX: real language code
			@CodeEditor(sheet.CodeEditor, sheet.CorrectionContent)
			@Submit(sheet.Id)
		</div>
	</div> // Tests Output
}

templ CodeEditor(language string, content string) {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/keymap/vim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/keymap/emacs.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/keymap/sublime.min.js"></script>
	<script src={ fmt.Sprintf("https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/%s/%s.min.js", language, language) }></script>
	<script>
		function initialized() {
			return {
				show: false,
				ready() { this.show = true },
				isReady() { return this.show === true },
			}
		}
	</script>
	<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.8/dist/cdn.min.js"></script>
	<div x-data="initialized">
		<textarea id="code" x-show="isReady"></textarea>
		<script>
			let editor = undefined;
			let enable = false;
			let keymap = "default";
			function setKeymap(newKeymap) {
				console.log(keymap, newKeymap, enable)
				keymap = newKeymap;
				updateKeymap();
			}
			function toggleKeymap() {
				enable = !enable;
				updateKeymap();
			}
			function updateKeymap() {
				console.log(keymap, enable)
				if (enable) {
					editor.setOption('keyMap', keymap)
				} else {
					editor.setOption('keyMap', "default")
				}
			}

			document.addEventListener('alpine:init', () => {
		    editor = CodeMirror.fromTextArea(document.getElementById("code"), {
		        mode: {{ language }},
		        lineNumbers: true,
						lineSeparator: false,
		        theme: "daisyui",
						indentUnit: 4,

		    });
				editor.setValue({{ content }});
				Alpine.data('initialized', () => ({isReady: false}))

			});
	  </script>
	</div>
	// Custom theme based on daisy
	<style>
	  /* Custom CodeMirror theme: "daisyui" using CSS variables */
	  .cm-s-daisyui.CodeMirror {
	    background-color: var(--color-base-100);
	    color: var(--color-base-content);
	  }

	  .cm-s-daisyui .CodeMirror-gutters {
	    background: var(--color-base-200);
	    color: var(--color-neutral-content);
	    border-right: 1px solid var(--color-base-300);
	  }

	  .cm-s-daisyui .CodeMirror-cursor {
	    border-left: 1px solid var(--color-warning);
	  }

	  .cm-s-daisyui .CodeMirror-linenumber {
	    color: var(--color-neutral-content);
	  }

	  .cm-s-daisyui .CodeMirror-selected {
	    background: color-mix(in oklch, var(--color-primary) 30%, transparent);
	  }

	  /* Syntax highlighting using DaisyUI theme colors */
	  .cm-s-daisyui .cm-keyword {
	    color: var(--color-secondary);
	  }

	  .cm-s-daisyui .cm-string {
	    color: var(--color-success);
	  }

	  .cm-s-daisyui .cm-comment {
	    color: var(--color-neutral-content);
	    font-style: italic;
	  }

	  .cm-s-daisyui .cm-number {
	    color: var(--color-error);
	  }

	  .CodeMirror {
	    height: 300px;
	    width: 100%;
	  }
	</style>
}

// TODO: autoloader is slow, change that
templ Prism() {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.30.0/components/prism-core.min.js" integrity="sha512-Uw06iFFf9hwoN77+kPl/1DZL66tKsvZg6EWm7n6QxInyptVuycfrO52hATXDRozk7KWeXnrSueiglILct8IkkA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.30.0/plugins/autoloader/prism-autoloader.min.js" integrity="sha512-SkmBfuA2hqjzEVpmnMt/LINrjop3GKWqsuLSSB3e7iBmYK7JuWw4ldmmxwD9mdm2IRTTi0OxSAfEGvgEi0i2Kw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
}
