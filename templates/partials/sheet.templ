package partials

import (
	"fmt"
	"nexzap/internal/models"
	"strconv"
)

templ Guide(sheet models.SheetTempl) {
	<h2 class="card-title text-primary">{ sheet.Title }</h2>
	<div class="flex flex-col md:min-h-0 md:grow">
		@guideContent(sheet)
		@buttons(sheet)
	</div>
}

templ guideContent(sheet models.SheetTempl) {
	<div x-init="updateSnippets()" class="md:min-h-0 md:overflow-y-auto md:grow prose max-w-none">
		@templ.Raw(sheet.SheetContent)
	</div>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/addon/runmode/colorize.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/addon/runmode/runmode.min.js"></script>
	<script>
		function updateSnippets() {
			let codeSnippets = document.getElementsByClassName("codeSnippet")
			for (let i = 0; i < codeSnippets.length; i++) {
				CodeMirror.runMode(codeSnippets[i].textContent, {{ sheet.CodeEditor }}, codeSnippets[i])
			}
		}
	</script>
}

func getNextUrl(base string, isLast bool, page int, id string) string {
	if isLast {
		return fmt.Sprintf("%s?page=%d", base, page)
	} else {
		return fmt.Sprintf("%s?page=%d&tutorial=%s", base, page, id)
	}
}

templ buttons(sheet models.SheetTempl) {
	<div class="flex justify-center items-center gap-4 mt-4">
		if sheet.NbPage > 1 {
			<button
				type="button"
				class="btn btn-primary"
				hx-get={ getNextUrl("/sheet", sheet.IsLast, sheet.NbPage-1, sheet.TutorialId) }
				hx-target="#left-panel"
				hx-swap="innerHTML show:#left-panel:top"
				hx-push-url="true"
			>Previous</button>
		}
		<span class="text-base">Page { strconv.Itoa(sheet.NbPage) } of { strconv.Itoa(sheet.MaxPage) }</span>
		if sheet.NbPage < sheet.MaxPage {
			<button
				type="button"
				class="btn btn-primary"
				hx-get={ getNextUrl("/sheet", sheet.IsLast, sheet.NbPage+1, sheet.TutorialId) }
				hx-target="#left-panel"
				hx-swap="innerHTML show:#left-panel:top"
				hx-push-url="true"
			>Next</button>
		}
	</div>
}

templ ExercisePanel(sheet models.SheetTempl) {
	<div id="test" class="card card-border card-body bg-base-200 shadow-lg flex md:flex-1 md:min-h-0">
		@ExerciseContent(sheet.ExerciseContent)
	</div>
}

templ ExerciseContent(content string) {
	<div class="md:overflow-y-auto md:grow prose max-w-none">
		@templ.Raw(content)
	</div>
}

templ EditorPanel(sheet models.SheetTempl) {
	<div
		class="card card-body bg-base-200 shadow-lg flex flex-col md:flex-1 md:min-h-0 md:overflow-y-auto"
		x-data="{keymap: 'default', enabled: false}"
	>
		// Change the keymap
		<div class="flex justify-between">
			<h3 class="card-title">Your Solution</h3>
			@keymap()
		</div>
		// Editor itself
		@codeEditor()
		@submit(sheet.Id)
	</div>
}

templ keymap() {
	<div class="flex justify-center items-center gap-4">
		<input type="checkbox" class="toggle" x-model="enabled" x-on:change="toggleKeymap()"/>
		<select class="select" x-model="keymap" x-on:change="setKeymap(keymap)">
			<option value="default">Keymap</option>
			<option value="vim">Vim</option>
			<option value="emacs">Emacs</option>
			<option value="sublime">Sublime</option>
		</select>
	</div>
}

templ submit(id string) {
	<div class="flex flex-col gap-4 md:min-h-0">
		// Button
		<form
			class="flex justify-center"
			hx-post="/submit"
			hx-swap="none"
			x-on:htmx:before-request="loading = true"
			x-on:htmx:after-request="loading = false; updateStatus(event)"
		>
			// NOTE : keep these as hidden, else the value loose \n and is invalid
			<input type="hidden" name="sheet" x-ref="sheet"/>
			<input type="hidden" name="payload" x-ref="payload"/>
			<button
				type="submit"
				class="btn btn-primary w-32"
				x-bind:disabled="loading"
				x-on:click="$refs.sheet.value = getKey(); $refs.payload.value = getCode()"
			>
				<span class="card-actions" x-show="!loading">Submit</span>
				<span x-show="loading" class="loading loading-spinner text-primary"></span>
			</button>
		</form>
		// Result
		<div
			class="alert shadow-lg overflow-y-auto grow w-full p-4"
			x-show="getStatusCode() !== -1 && !loading"
			x-bind:class="getStatusCode() === 0 ? 'alert-success' : getStatusCode() === 520 ? 'alert-warning' : 'alert-error'"
		>
			<pre
				x-bind:class="getStatusCode() === 0 ? 'text-success-content bg-success' : getStatusCode() === 520 ? 'text-warning-content bg-warning' : 'text-error-content bg-error'"
				x-text="`Status : ${getStatusCode()}\n${getOutput()}`"
				class="prose"
			></pre>
		</div>
	</div>
}

// TODO : resolve blink
templ codeEditor() {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/keymap/vim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/keymap/emacs.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/keymap/sublime.min.js"></script>
	// require css in base.templ
	// does not require css
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/addon/edit/matchbrackets.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.18/addon/edit/closebrackets.min.js"></script>
	<textarea x-init="initEditor($el)"></textarea>
	<input id="codemirror" type="hidden"/> // used for next script
	// Custom theme based on daisy
	<style>
	  /* Custom CodeMirror theme: "daisyui" using CSS variables */
	  .cm-s-daisyui.CodeMirror {
	    background-color: var(--color-base-100);
	    color: var(--color-base-content);
	  }

	  .cm-s-daisyui .CodeMirror-gutters {
	    background: var(--color-base-200);
	    color: var(--color-neutral-content);
	    border-right: 1px solid var(--color-base-300);
	  }

	  .cm-s-daisyui .CodeMirror-cursor {
	    border-left: 1px solid var(--color-warning);
	  }

	  .cm-s-daisyui .CodeMirror-linenumber {
	    color: var(--color-neutral-content);
	  }

	  .cm-s-daisyui .CodeMirror-selected {
	    background: color-mix(in oklch, var(--color-primary) 30%, transparent);
	  }

	  /* Syntax highlighting using DaisyUI theme colors */
	  .cm-s-daisyui .cm-keyword {
	    color: var(--color-secondary);
	  }

	  .cm-s-daisyui .cm-string {
	    color: var(--color-success);
	  }

	  .cm-s-daisyui .cm-comment {
	    color: var(--color-neutral-content);
	    font-style: italic;
	  }

	  .cm-s-daisyui .cm-number {
	    color: var(--color-error);
	  }

	  .cm-s-daisyui .cm-atom {
	    color: var(--color-accent);
	  }

	  .cm-s-daisyui .cm-def {
	    color: var(--color-accent);
	  }

	  .cm-s-daisyui .cm-variable {
	    color: var(--color-primary);
	  }

	  .cm-s-daisyui .cm-variable-2,
	  .cm-s-daisyui .cm-variable-3 {
	    color: var(--color-info);
	  }

	  .cm-s-daisyui .cm-property {
	    color: var(--color-primary);
	  }

	  .cm-s-daisyui .cm-operator {
	    color: var(--color-warning);
	  }

	  .cm-s-daisyui .cm-string-2 {
	    color: var(--color-success);
	  }

	  .cm-s-daisyui .cm-meta {
	    color: var(--color-neutral-content);
	  }

	  .cm-s-daisyui .cm-qualifier {
	    color: var(--color-secondary);
	  }

	  .cm-s-daisyui .cm-builtin {
	    color: var(--color-info);
	  }

	  .cm-s-daisyui .cm-bracket {
	    color: var(--color-base-content);
	  }

	  .cm-s-daisyui .cm-tag {
	    color: var(--color-secondary);
	  }

	  .cm-s-daisyui .cm-attribute {
	    color: var(--color-info);
	  }

	  .cm-s-daisyui .cm-header {
	    color: var(--color-primary);
	  }

	  .cm-s-daisyui .cm-quote {
	    color: var(--color-neutral-content);
	  }

	  .cm-s-daisyui .cm-hr {
	    color: var(--color-base-300);
	  }

	  .cm-s-daisyui .cm-link {
	    color: var(--color-info);
	  }

	  .cm-s-daisyui .cm-error {
	    color: var(--color-error);
	  }

	  .cm-s-daisyui .CodeMirror-activeline-background {
	    background: color-mix(in oklch, var(--color-base-200) 20%, transparent);
	  }

	  .cm-s-daisyui .CodeMirror-matchingbracket {
	    border-bottom: 1px solid var(--color-success);
	  }

	  /* Optional: layout styles */
	  .CodeMirror {
	    height: 300px;
	    width: 100%;
	  }
	</style>
}
