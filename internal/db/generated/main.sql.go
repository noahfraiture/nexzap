// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: main.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const findLastTutorial = `-- name: FindLastTutorial :one
SELECT
  array_agg (s.content)::text[] AS sheet_contents,
  array_agg (te.content)::text[] AS test_contents,
  l.name AS language_name
FROM
  tutorials tu
  JOIN sheets s ON s.tutorial_id = tu.id
  JOIN tests te ON te.id = s.test_id
  JOIN languages l ON l.id = tu.language_id
GROUP BY
  tu.id,
  te.docker_image,
  l.name
ORDER BY
  tu.updated_at DESC
LIMIT
  1
`

type FindLastTutorialRow struct {
	SheetContents []string
	TestContents  []string
	LanguageName  string
}

func (q *Queries) FindLastTutorial(ctx context.Context) (FindLastTutorialRow, error) {
	row := q.db.QueryRow(ctx, findLastTutorial)
	var i FindLastTutorialRow
	err := row.Scan(&i.SheetContents, &i.TestContents, &i.LanguageName)
	return i, err
}

const insertCompleteTutorial = `-- name: InsertCompleteTutorial :one
WITH lang AS (
  INSERT INTO languages (name)
  VALUES ($1)
  RETURNING id
),
test AS (
  INSERT INTO tests (content, docker_image)
  SELECT unnest($2::text[]), $3
  RETURNING id
),
tut AS (
  INSERT INTO tutorials (language_id, created_at, updated_at)
  VALUES ((SELECT id FROM lang), NOW(), NOW())
  RETURNING id
),
sheet AS (
  INSERT INTO sheets (content, test_id, tutorial_id)
  SELECT unnest($4::text[]), (SELECT id FROM test LIMIT 1), (SELECT id FROM tut)
  RETURNING id
)
SELECT (SELECT id FROM tut) AS tutorial_id
`

type InsertCompleteTutorialParams struct {
	LanguageName  string
	TestContents  []string
	DockerImage   string
	SheetContents []string
}

func (q *Queries) InsertCompleteTutorial(ctx context.Context, arg InsertCompleteTutorialParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertCompleteTutorial,
		arg.LanguageName,
		arg.TestContents,
		arg.DockerImage,
		arg.SheetContents,
	)
	var tutorial_id uuid.UUID
	err := row.Scan(&tutorial_id)
	return tutorial_id, err
}
